from output import colours
from pyfiglet import Figlet
from clint.textui import colored, indent, puts, columns, progress

from PyInquirer import style_from_dict, Token, prompt, Separator
from pprint import pprint

from typing import Type
from typing import List

class InterativeMenu:

    style = style_from_dict({
        Token.Separator: '#cc5454',
        Token.QuestionMark: '#673ab7 bold',
        Token.Selected: '#cc5454',  # default
        Token.Pointer: '#673ab7 bold',
        Token.Instruction: '',  # default
        Token.Answer: '#f44336 bold',
        Token.Question: '',
    })

    def __init__(self):
        pass

    #def create_menu_options(self):
    def display_menu(self, menu_ops):
        pass#answers = prompt(questions, style=style)

class Text:
    def __init__(self, colour=colours.colour_white, text="", bold=False, always=False):
        self.colour = colour
        self.text = text
        self.bold = bold
        self.always = always


class ProgressBar:
    def __init__(self, label="", expected_size=0):
        self.progress_bar = self.create_progress_bar(label, expected_size)

    def create_progress_bar(self, label="", expected_size=0):
        return progress.Bar(label=label, expected_size=expected_size)

    def show_progress(self, label="", current_index=0):
        self.progress_bar.label = label
        self.progress_bar.show(current_index)

    ''' 
    moloch = ["a1", "a2", "b2", "b3", "b4", "c1", "c2"]
    prog_bar = create_progress_bar(label="", expected_size=7)
    #print_text([view.Text(indentation=4, quote="~", colour=colours.colour_green, text="Scanning Molochs")])
    for count, elem in enumerate(moloch):
    count = count + 1
    show_progress(prog_bar, "Scanning Moloch: "+elem, count)
    sleep(0.5)'''

def print_banner(text="", font='slant', colour=colours.colour_white):
    result = Figlet(font=font)

    if colour == colours.colour_white:
        print(colored.white(result.renderText(text)))
    elif colour == colours.colour_blue:
        print(colored.blue(result.renderText(text)))


def print_text(text_objects: List[Type[Text]], indentation=0, prefix_quote="", num_columns=1, column_spacing=1):
    if column_spacing < 1: column_spacing = 1
    if num_columns < 1: num_columns = 1

    #add elements to last indexes to avoid index out of bounds - this can be improved later.
    while len(text_objects) % num_columns != 0:
        text_objects.append(Text(text=""))
        print(str(len(text_objects)) + "is not a multiple of " + str(num_columns))

    x = 0
    with indent(indentation, quote=prefix_quote):
        while x < len(text_objects):
            if num_columns == 1:
                puts(columns([colored.red(text_objects[x].text),column_spacing]))
                x = x + 1
            if num_columns == 2:
                puts(columns([colored.red(text_objects[x].text), column_spacing],
                             [colored.red(text_objects[x + 1].text), column_spacing]))
                x = x + 2
            if num_columns == 3:
                puts(columns([colored.red(text_objects[x].text), column_spacing],
                             [colored.red(text_objects[x + 1].text), column_spacing],
                             [colored.red(text_objects[x + 2].text), column_spacing]))
                x = x + 3
            if num_columns == 4:
                puts(columns([colored.red(text_objects[x].text), column_spacing],
                             [colored.red(text_objects[x + 1].text), column_spacing],
                             [colored.red(text_objects[x + 2].text), column_spacing],
                             [colored.red(text_objects[x + 3].text), column_spacing]))
                x = x + 4
            if num_columns == 5:
                puts(columns([colored.red(text_objects[x].text), column_spacing],
                             [colored.red(text_objects[x + 1].text), column_spacing],
                             [colored.red(text_objects[x + 2].text), column_spacing],
                             [colored.red(text_objects[x + 3].text), column_spacing],
                             [colored.red(text_objects[x + 4].text), column_spacing]))
                x = x + 5
            else:
                puts(columns([colored.red(text_objects[x].text), column_spacing]))
                x = x + 1



